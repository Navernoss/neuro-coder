require("dotenv").config();

import { Bot } from "grammy";
import commands from "./commands";
import { development, production } from "./utils/launch";
import { MyContext } from "./utils/types";
import { hydrateFiles } from "@grammyjs/files";
import { conversations, createConversation } from "@grammyjs/conversations";
import { session, SessionFlavor } from "grammy";
import { imageSizeConversation } from "./commands/imagesize";
import { customMiddleware, generateImage, pulse, upgradePrompt } from "./commands/helpers";
import { generateImageConversation } from "./commands/generateImage";
import { get100AnfiVesnaConversation } from "./commands/get100";
import { soulConversation } from "./commands/soul";
import { voiceConversation } from "./commands/voice";
import { getGeneratedImages, getPrompt, savePrompt, setModel } from "./core/supabase/ai";
import { InputMediaPhoto } from "grammy/types";
import { inviterConversation } from "./commands/inviter";
import { models } from "./commands/constants";
interface SessionData {
  melimi00: {
    videos: string[];
    texts: string[];
  };
}

type MyContextWithSession = MyContext & SessionFlavor<SessionData>;

const bot = new Bot<MyContextWithSession>(process.env.BOT_TOKEN || "");

bot.api.config.use(hydrateFiles(bot.token));

bot.use(session({ initial: () => ({}) }));
bot.api.setMyCommands([
  {
    command: "start",
    description: "üëã –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
  },
  {
    command: "imagesize",
    description: "üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
  },
  {
    command: "avatar",
    description: "üë§ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ –∞–≤–∞—Ç–∞—Ä—É",
  },
  {
    command: "voice",
    description: "üé§ –î–æ–±–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—É –≥–æ–ª–æ—Å",
  },
]);
bot.use(conversations());
bot.use(createConversation(imageSizeConversation));
bot.use(createConversation(generateImageConversation));
bot.use(createConversation(get100AnfiVesnaConversation));
bot.use(createConversation(soulConversation));
bot.use(createConversation(voiceConversation));
bot.use(createConversation(inviterConversation));
bot.use(customMiddleware);
bot.use(commands);

bot.on("message:text", async (ctx) => {
  if (ctx.message.text.startsWith("/")) return;
  if (ctx.message.text) {
  }
});
bot.on("callback_query:data", async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const isRu = ctx.from?.language_code === "ru";
  if (callbackData.startsWith("generate_")) {
    try {
      const count = parseInt(callbackData.split("_")[1]);
      const prompt_id = callbackData.split("_")[2];
      const info = await getGeneratedImages(ctx.from?.id.toString() || "");
      const { count: generatedCount, limit } = info;

      if (generatedCount >= limit) {
        await ctx.reply(
          isRu
            ? "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            : "‚ö†Ô∏è You have no more uses left. Please pay for image generation.",
        );
        return;
      } else if (generatedCount + count > limit) {
        await ctx.reply(
          isRu
            ? `‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${limit - generatedCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.`
            : `‚ö†Ô∏è You have ${limit - generatedCount} uses left. Please pay for image generation.`,
        );
        return;
      }

      if (ctx.callbackQuery.message?.message_id) {
        await ctx.api.deleteMessage(ctx.chat?.id || "", ctx.callbackQuery.message?.message_id);
      }

      const prompt = await getPrompt(prompt_id);
      const message = await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å..." : "‚è≥ Image generation has started...");

      const images: InputMediaPhoto[] = [];
      for (let i = 0; i < count; i++) {
        const { image } = await generateImage(prompt.prompt, prompt.model_type, ctx.from?.id.toString(), ctx, "");
        images.push({ type: "photo", media: image });
        await ctx.api.editMessageText(
          ctx.chat?.id || "",
          message.message_id,
          isRu ? `‚è≥ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ${i + 1}/${count}...` : `‚è≥ Generated images ${i + 1}/${count}...`,
        );
        await pulse(ctx, image, prompt.prompt, `${prompt.model_type} (with callback)`);
      }

      await ctx.replyWithMediaGroup(images);
      await ctx.api.deleteMessage(ctx.chat?.id || "", message.message_id);
      await ctx.reply(isRu ? `ü§î –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ?` : `ü§î Generate more?`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1", callback_data: `generate_1_${prompt_id}` },
              { text: "2", callback_data: `generate_2_${prompt_id}` },
            ],
            [
              { text: "3", callback_data: `generate_3_${prompt_id}` },
              { text: "4", callback_data: `generate_4_${prompt_id}` },
            ],
            [{ text: isRu ? "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "‚¨ÜÔ∏è Improve prompt", callback_data: `improve_${prompt_id}` }],
          ],
        },
      });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", e);
      await ctx.reply(
        isRu
          ? "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          : "‚ùå Sorry, an error occurred while generating images. Please try again later.",
      );
    }
  } else if (callbackData.startsWith("model_")) {
    const model = callbackData.split("_")[1];
    const message_id = ctx.callbackQuery.message?.message_id;
    await setModel(ctx.from?.id.toString() || "", model);
    if (!message_id) return;
    await ctx.api.deleteMessage(ctx.chat?.id || "", message_id);
    await ctx.reply(isRu ? "üß† –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!" : "üß† Model successfully changed!");
  } else if (callbackData.startsWith("improve_")) {
    const prompt_id = callbackData.split("_")[callbackData.split("_").length - 1];
    const prompt = await getPrompt(prompt_id);
    console.log(prompt_id, "prompt_id");
    console.log(callbackData, "callbackData");

    if (callbackData.includes("accept")) {
      await ctx.editMessageText(isRu ? `ü§î –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º?` : `ü§î Generate more with new prompt?`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1", callback_data: `generate_1_${prompt_id}` },
              { text: "2", callback_data: `generate_2_${prompt_id}` },
            ],
            [
              { text: "3", callback_data: `generate_3_${prompt_id}` },
              { text: "4", callback_data: `generate_4_${prompt_id}` },
            ],
            [{ text: isRu ? "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "‚¨ÜÔ∏è Improve prompt", callback_data: `improve_${prompt_id}` }],
          ],
        },
      });
      return;
    } else if (callbackData.includes("reject")) {
      await ctx.editMessageText(isRu ? `ü§î –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º?` : `ü§î Generate more with initial prompt?`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1", callback_data: `generate_1_${prompt_id}` },
              { text: "2", callback_data: `generate_2_${prompt_id}` },
            ],
            [
              { text: "3", callback_data: `generate_3_${prompt_id}` },
              { text: "4", callback_data: `generate_4_${prompt_id}` },
            ],
            [{ text: isRu ? "‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" : "‚¨ÜÔ∏è Improve prompt", callback_data: `improve_${prompt_id}` }],
          ],
        },
      });
      return;
    }
    const systemMessage = await ctx.reply(isRu ? "üß† –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞..." : "üß† Prompt upgrading...");
    const upgradedPrompt = await upgradePrompt(`${models[prompt.model_type].word} ${prompt.prompt}`);

    if (!upgradedPrompt) {
      await ctx.reply(
        isRu
          ? "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          : "‚ùå Sorry, an error occurred while upgrading the prompt. Please try again later.",
      );
      await ctx.api.deleteMessage(ctx.chat?.id || "", systemMessage.message_id);
      return;
    }

    const upgradedPromptId = await savePrompt(upgradedPrompt, prompt.model_type);
    await ctx.api.deleteMessage(ctx.chat?.id || "", systemMessage.message_id);

    console.log(upgradedPrompt, "upgradedPrompt");
    await ctx.editMessageText(upgradedPrompt, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ", callback_data: `improve_accept_${upgradedPromptId}` },
            { text: "‚ùå", callback_data: `improve_reject_${prompt_id}` },
          ],
          [{ text: "üîÑ", callback_data: `improve_${prompt_id}` }],
        ],
      },
    });
    return;
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  const isRu = ctx.from?.language_code === "ru";
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  console.error(err.error);
  ctx
    .reply(
      isRu
        ? "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        : "Sorry, an error occurred while processing your request. Please try again later.",
    )
    .catch((e) => {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e);
    });
});

console.log(process.env.NODE_ENV, "process.env.NODE_ENV");
process.env.NODE_ENV === "development" ? development(bot) : production(bot);

export { bot };
