import { Context, InputFile } from "grammy";

import ffmpeg from "fluent-ffmpeg";
import ffmpegInstaller from "@ffmpeg-installer/ffmpeg";
import path from "path";
import fs from "fs";
import { generateVoice, getSlides, makeTextLayers, overlayPhotoOnVideo, toShortVideo } from "../../helpers";
import { getHistory, setHistory } from "../../../core/supabase/ai";
import { getVideoUrl, uploadVideo } from "../../../core/supabase/video";
import { createSlideshow } from "slideshow-video";

ffmpeg.setFfmpegPath(ffmpegInstaller.path);

const checkAccess = (filePath: string, mode: number) => {
  return new Promise<void>((resolve, reject) => {
    fs.access(filePath, mode, (err) => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
};

const neurocoder01 = async (ctx: Context): Promise<void> => {
  try {
    await ctx.reply("Video creation started");

    const inputFilePath = path.resolve(__dirname, "../assets/input/");
    const outputFilePath = path.resolve(__dirname, "../assets/output/");
    const photoTempPath = path.resolve(__dirname, "../assets/temp/photo");
    const tempFilePath = path.resolve(__dirname, "../assets/temp/video");
    const videoTxtPath = `${tempFilePath}/video.txt`;
    const folder = "news";
    const logoPath = path.resolve(__dirname, "../assets/logo");
    const scenesCount = 4;

    const images: string[] = [];

    try {
      await checkAccess(inputFilePath, fs.constants.R_OK); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ
      await checkAccess(path.dirname(outputFilePath), fs.constants.W_OK); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      console.log("Access check passed");
    } catch (err) {
      console.error("Access check failed:", err);
      throw err;
    }
    // const history = await getHistory("neurocoder", "neurocoder01", "reels");
    const newsText = `üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∞–ª –ø—Ä–æ—â–µ! 

Google –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –ø–ª–∞—Ç—å–µ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –ø–ª–∞—Ç—å–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–∞ –º–æ–¥–µ–ª—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∞–∂–∞—é—Ç –≤–∞—à —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã –∏ —Ä–∞–∑–º–µ—Ä, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É. 

üì∏ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ù–∞–π–¥–∏—Ç–µ –ø–ª–∞—Ç—å—è –≤ Google –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ —Å –º–µ—Ç–∫–æ–π "–ø—Ä–∏–º–µ—Ä–∫–∞".
2. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥ –≤–∞—à —Ç–∏–ø —Ç–µ–ª–∞.
3. –û—Ü–µ–Ω–∏—Ç–µ –ø–ª–∞—Ç—å–µ —Å —Ä–∞–∑–Ω—ã—Ö —É–≥–ª–æ–≤.

üëó –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –ë–æ–ª–µ–µ –ª–∏—á–Ω—ã–π –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –æ–ø—ã—Ç —à–æ–ø–∏–Ω–≥–∞.
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.
- –ü–æ–≤—ã—à–µ–Ω–∏–µ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ –±—Ä–µ–Ω–¥–µ –∑–∞ —Å—á–µ—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.

–° –¥–∞–Ω–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —à–æ–ø–∏—Ç—å—Å—è —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É –∏ –Ω–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–ª–∞—Ç—å–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç! ‚ú® `;
    const slides = await getSlides({
      prompt: `–ù–ï–õ–¨–ó–Ø –°–û–ó–î–ê–í–ê–¢–¨ –ë–û–õ–¨–®–ï –°–¶–ï–ù –ß–ï–ú scenesCount, –≤—Å–µ —Å—Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –æ–±—ä—ë–º–∞, –Ω–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ. –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —á–∏—Ç–∞—Ç—å—Å—è –∑–∞ 12 —Å–µ–∫—É–Ω–¥, –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ, —É–±–µ—Ä–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ. –†–∞–∑–±–µ–π –¥–∞–Ω–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ü–µ–Ω—ã ${newsText}`,
      scenesCount: scenesCount,
      isDescription: false,
    });
    console.log(slides);

    const randomAudioIndex = Math.floor(Math.random() * 9);

    const audioFilePath = path.resolve(__dirname, `../assets/audio/${randomAudioIndex}.mp3`);

    await fs.promises.writeFile(videoTxtPath, "", "utf8");
    for (let i = 0; i < scenesCount; i++) {
      const scene = slides.scenes[i];
      await makeTextLayers(scene.onscreenText, `${photoTempPath}/photo${i}.png`, false, `${logoPath}/01.png`, "neurocoder", 100);
      const randomVideoIndex = Math.floor(Math.random() * 6);
      images.push(`${photoTempPath}/photo${i}.png`);
      await toShortVideo(`${inputFilePath}/${folder}/${randomVideoIndex}.mp4`, `${tempFilePath}/video${i}.mp4`);
      await overlayPhotoOnVideo(`${tempFilePath}/video${i}.mp4`, `${photoTempPath}/photo${i}.png`, `${tempFilePath}/scene${i}.mp4`);
      const videoFilePath = `${tempFilePath}/scene${i}.mp4`;
      const videoEntry = `file '${videoFilePath}'\n`;

      await fs.promises.appendFile(videoTxtPath, videoEntry, "utf8");
    }

    await new Promise<void>((resolve, reject) => {
      ffmpeg()
        .input(`${tempFilePath}/video.txt`)
        .output(`${tempFilePath}/merged_video.mp4`)
        .inputOptions(["-f concat", "-safe 0"])
        .outputOptions(["-c copy"])
        .on("end", () => {
          console.log("Merging video complete!");
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–ª–µ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
          ffmpeg.ffprobe(`${tempFilePath}/merged_video.mp4`, (err, metadata) => {
            if (err) {
              console.error("Error getting video duration:", err);
            } else {
              console.log("Merged video duration:", metadata.format.duration, "seconds");
            }
          });
          resolve();
        })
        .on("error", (err) => {
          console.error("Error:", err);
          reject(err);
        })
        .on("progress", (progress) => {
          console.log("Progress:", Math.round(progress.percent || 0), "% done");
        })
        .run();
    });

    await new Promise<void>((resolve, reject) => {
      ffmpeg()
        .input(`${tempFilePath}/merged_video.mp4`)
        .input(audioFilePath)
        .outputOptions(["-c:v copy", "-c:a aac", "-strict experimental", "-shortest"])
        .output(`${outputFilePath}/final_video.mp4`)
        .on("end", () => {
          console.log("Audio added successfully!");
          resolve();
        })
        .on("error", (err, stdout, stderr) => {
          console.error("Error adding audio:", err);
          console.error("ffmpeg stdout:", stdout);
          console.error("ffmpeg stderr:", stderr);
          reject(err);
        })
        .on("progress", (progress) => {
          console.log("Progress:", Math.round(progress.percent || 0), "% done");
        })
        .run();
    });

    await ctx.replyWithVideo(new InputFile(`${outputFilePath}/final_video.mp4`), { caption: "audio" });
    await ctx.reply(newsText);
    if (!ctx.from) throw new Error("No user");
    // const fileName = `${ctx.from.id}_${Date.now()}_neurocoder01.mp4`;
    // await uploadVideo(`${outputFilePath}/final_video.mp4`, ctx.from.id.toString(), "neurocoder", fileName);
    // const videoUrl = await getVideoUrl("neurocoder", fileName);
    // if (!videoUrl) throw new Error("No video url");

    // const textToSpeach = slides.scenes.map((scene) => scene.text).join(" ");
    // const generateVoiceData = await generateVoice(textToSpeach, "bc4e1f5f-a480-4483-a3e5-4a62962a65e3");
    // await setHistory("neurocoder", slides.scenes[0].text, videoUrl, "neurocoder01", "reels", generateVoiceData.id, ctx.message?.chat.id.toString());
    await ctx.reply("Video creation finished");
    return;
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
    throw error;
  }
};

export default neurocoder01;
