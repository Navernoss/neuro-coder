import { generateImage, pulse } from "../../helpers"
import { MyContext } from "../../utils/types"
import { Conversation } from "@grammyjs/conversations"
import { InlineKeyboard } from "grammy"
import { getGeneratedImages } from "../../core/supabase/ai"
import { InputFile } from "grammy"
import { generateMoreImagesButtons } from "../../helpers/buttonHandlers"

const generateImageConversation = async (conversation: Conversation<MyContext>, ctx: MyContext): Promise<void> => {
  const isRu = ctx.from?.language_code === "ru"
  const keyboard = new InlineKeyboard().text(isRu ? "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" : "‚ùå Cancel generation", "cancel")
  const model_type = ctx.message?.text?.slice(1)
  console.log(model_type)
  const greetingMessage = await ctx.reply(
    isRu
      ? "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é."
      : "üëã Hello! Write a prompt in English to generate an image. If you want to use a reference image, then attach it to the message.",
    {
      reply_markup: keyboard,
    },
  )
  const { message, callbackQuery } = await conversation.wait()
  const info = await getGeneratedImages(ctx.from?.id.toString() || "")
  const { count, limit } = info

  if (count >= limit) {
    await ctx.reply(
      isRu
        ? "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
        : "‚ö†Ô∏è You have no more uses left. Please pay for image generation.",
    )
    return
  }

  if (callbackQuery?.data === "cancel") {
    await ctx.api.deleteMessage(ctx.chat?.id || "", greetingMessage.message_id)
    await ctx.reply(isRu ? "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." : "‚ùå You canceled image generation.")
    return
  }

  if (!message || !ctx.from?.id) return

  const text = message.photo ? message.caption : message.text
  let file
  console.log(message.document)
  if (message.document) {
    const referenceFileId = message.document.file_id
    file = await ctx.api.getFile(referenceFileId)
  }
  const fileUrl = message.document ? `https://api.telegram.org/file/bot${ctx.api.token}/${file.file_path}` : ""
  console.log(fileUrl)
  const generatingMessage = await ctx.reply(isRu ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "‚è≥ Generating...")
  const { image, prompt_id } = await generateImage(text || "", model_type || "", ctx.from.id.toString(), ctx)

  if (!image) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
  }

  await ctx.api.deleteMessage(ctx.chat?.id || "", generatingMessage.message_id)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const photoToSend = Buffer.isBuffer(image) ? new InputFile(image) : image
  await ctx.replyWithPhoto(photoToSend)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è pulse
  const pulseImage = Buffer.isBuffer(image) ? `data:image/jpeg;base64,${image.toString("base64")}` : image
  await pulse(ctx, pulseImage, text || "", `/${model_type}`)

  if (count < limit) {
    await ctx.reply(isRu ? `‚ÑπÔ∏è –û—Å—Ç–∞–ª–æ—Å—å ${limit - count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π` : `‚ÑπÔ∏è ${limit - count} uses left`)
    generateMoreImagesButtons(ctx, prompt_id)
  }
}

export { generateImageConversation }
