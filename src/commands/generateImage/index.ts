import { generateImage, pulse } from "../helpers";
import { MyContext } from "../../utils/types";
import { Conversation } from "@grammyjs/conversations";
import { InlineKeyboard } from "grammy";
import { getGeneratedImages } from "../../core/supabase/ai";

async function generateImageConversation(conversation: Conversation<MyContext>, ctx: MyContext) {
  const keyboard = new InlineKeyboard().text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "cancel");
  const model_type = ctx.message?.text?.slice(1);
  console.log(model_type);
  const greetingMessage = await ctx.reply(
    "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.",
    {
      reply_markup: keyboard,
    },
  );
  const { message, callbackQuery } = await conversation.wait();
  const info = await getGeneratedImages(ctx.from?.id.toString() || "");
  const { count, limit } = info;

  if (count >= limit) {
    await ctx.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.");
    return;
  }

  if (callbackQuery?.data === "cancel") {
    await ctx.api.deleteMessage(ctx.chat?.id || "", greetingMessage.message_id);
    await ctx.reply("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
    return;
  }

  if (!message || !ctx.from?.id) return;

  const text = message.photo ? message.caption : message.text;
  let file;
  if (message.photo) {
    const referenceFileId = message.photo[0].file_id;
    file = await ctx.api.getFile(referenceFileId);
  }
  const fileUrl = message.photo ? `https://api.telegram.org/file/bot${ctx.api.token}/${file.file_path}` : "";
  console.log(fileUrl);
  const generatingMessage = await ctx.reply("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å...");
  const { image, prompt_id } = await generateImage(text || "", model_type || "", ctx.from?.id.toString(), ctx, fileUrl);
  await ctx.api.deleteMessage(ctx.chat?.id || "", generatingMessage.message_id);
  await ctx.replyWithPhoto(image);
  await ctx.reply(`ü§î –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ?`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "1", callback_data: `generate_1_${prompt_id}` },
          { text: "2", callback_data: `generate_2_${prompt_id}` },
        ],
        [
          { text: "3", callback_data: `generate_3_${prompt_id}` },
          { text: "4", callback_data: `generate_4_${prompt_id}` },
        ],
      ],
    },
  });

  // // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é" –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  // const retryKeyboard = new InlineKeyboard().text("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", "retry");
  // await ctx.reply("üîÑ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", { reply_markup: retryKeyboard });

  await pulse(ctx, image, text || "", `/${model_type}`);
  if (count < limit) {
    await ctx.reply(`‚ÑπÔ∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${limit - count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`);
  } else if (count === limit) {
    await ctx.reply(`‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.`);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
  // const { callbackQuery: retryCallback } = await conversation.wait();
  // if (retryCallback?.data === "retry") {
  //   await ctx.reply("–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?");
  //   const { message: countMessage } = await conversation.wait();
  //   const photoCount = parseInt(countMessage?.text || "", 10);

  //   if (isNaN(photoCount) || photoCount <= 0) {
  //     console.log(photoCount);
  //     await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  //     return;
  //   }

  //   for (let i = 0; i < photoCount; i++) {
  //     const image = await generateImage(text || "", model_type || "", ctx.from?.id.toString(), ctx, fileUrl);
  //     await ctx.replyWithPhoto(image);
  //     await pulse(ctx, image, text || "", `/${model_type}`);
  //   }
  //   if (count < limit) {
  //     await ctx.reply(`–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${limit - count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.`);
  //   } else if (count === limit) {
  //     await ctx.reply(`–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.`);
  //   }
  // }
}

export { generateImageConversation };
